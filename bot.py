import logging
import os
import json
import gspread
import base64

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –°–∫–æ—É–ø—ã
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ JSON
encoded_creds = os.environ["GOOGLE_CREDENTIALS_B64"]
decoded_creds = base64.b64decode(encoded_creds).decode("utf-8")
service_account_info = json.loads(decoded_creds)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(service_account_info, scopes=scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1-PYvDusEahk2EYI2f4kDtu4uQ-pV756kz6fb_RXn-s8"
).sheet1

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Cze≈õƒá! U≈ºyj komend:\n"
        "+numer, p√≥≈Çka ‚Äî dodaj sprƒô≈ºynƒô\n"
        "-numer ‚Äî usu≈Ñ sprƒô≈ºynƒô\n"
        "=numer, nowa_p√≥≈Çka ‚Äî zmie≈Ñ p√≥≈Çkƒô\n"
        "numer ‚Äî sprawd≈∫ gdzie znajduje siƒô sprƒô≈ºyna"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    data = sheet.get_all_records()

    try:
        if text.startswith("+"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            content = text[1:].strip()
            number, shelf = [x.strip() for x in content.split(",")]
            sheet.append_row([number, shelf])
            await update.message.reply_text(f"‚úÖ Sprƒô≈ºyna {number} dodana na p√≥≈Çkƒô {shelf}.")

        elif text.startswith("-"):
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            number = text[1:].strip()
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.delete_rows(idx)
                    await update.message.reply_text(f"‚ùå Sprƒô≈ºyna {number} zosta≈Ça usuniƒôta.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        elif text.startswith("="):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∫–∏
            content = text[1:].strip()
            number, new_shelf = [x.strip() for x in content.split(",")]
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.update_cell(idx, 2, new_shelf)
                    await update.message.reply_text(f"üîÅ P√≥≈Çka dla sprƒô≈ºyny {number} zosta≈Ça zmieniona na {new_shelf}.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        else:
            # –ü–æ–∏—Å–∫ –ø—Ä—É–∂–∏–Ω—ã
            for row in data:
                if str(row["Numer"]) == text:
                    response = f"üîç Znaleziono:\nNumer: {row['Numer']}\nP√≥≈Çka: {row['Polka']}"
                    await update.message.reply_text(response)
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

    except Exception as e:
        logging.error(f"B≈ÇƒÖd przy przetwarzaniu komendy: {e}")
        await update.message.reply_text("‚ùå B≈ÇƒÖd przetwarzania. Upewnij siƒô, ≈ºe format komendy jest poprawny.")

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling
def main():
    bot_token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

    app.run_polling()

if __name__ == "__main__":
    main()
