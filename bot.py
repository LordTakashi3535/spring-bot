import logging
import os
import json
import base64
import gspread

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –°–∫–æ—É–ø—ã –¥–ª—è Google API
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∫–ª—é—á–∞–º–∏
encoded_creds = os.environ["GOOGLE_CREDENTIALS_B64"]
decoded_creds = base64.b64decode(encoded_creds).decode("utf-8")
service_account_info = json.loads(decoded_creds)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(service_account_info, scopes=scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1-PYvDusEahk2EYI2f4kDtu4uQ-pV756kz6fb_RXn-s8"
).sheet1

# –ö–Ω–æ–ø–∫–∏ –ø–æ–ª–æ–∫ (–≤ —Å—Ç–æ–ª–±—Ü–∞—Ö)
SHELF_BUTTONS = [
    ["a1", "a2", "a3", "a4", "a5", "a6", "a7"],
    ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8"],
    ["c1", "c2", "c3"]
]

def shelves_keyboard():
    keyboard = []
    for row in SHELF_BUTTONS:
        buttons = [InlineKeyboardButton(shelf.upper(), callback_data=f"move_shelf:{shelf}") for shelf in row]
        keyboard.append(buttons)
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Cze≈õƒá! U≈ºyj komend:\n"
        "+numer, p√≥≈Çka ‚Äî dodaj sprƒô≈ºynƒô\n"
        "-numer ‚Äî usu≈Ñ sprƒô≈ºynƒô\n"
        "=numer, nowa_p√≥≈Çka ‚Äî zmie≈Ñ p√≥≈Çkƒô\n"
        "numer ‚Äî sprawd≈∫ gdzie znajduje siƒô sprƒô≈ºyna"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    data = sheet.get_all_records()

    try:
        if text.startswith("+"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            content = text[1:].strip()
            number, shelf = [x.strip() for x in content.split(",")]
            sheet.append_row([number, shelf])
            await update.message.reply_text(f"‚úÖ Sprƒô≈ºyna {number} dodana na p√≥≈Çkƒô {shelf}.")

        elif text.startswith("-"):
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            number = text[1:].strip()
            for idx, row in enumerate(data, start=2):
                if str(row.get("Numer")) == number:
                    sheet.delete_rows(idx)
                    await update.message.reply_text(f"‚ùå Sprƒô≈ºyna {number} zosta≈Ça usuniƒôta.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        elif text.startswith("="):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∫–∏
            content = text[1:].strip()
            number, new_shelf = [x.strip() for x in content.split(",")]
            for idx, row in enumerate(data, start=2):
                if str(row.get("Numer")) == number:
                    sheet.update_cell(idx, 2, new_shelf)
                    await update.message.reply_text(f"üîÅ P√≥≈Çka dla sprƒô≈ºyny {number} zosta≈Ça zmieniona na {new_shelf}.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        else:
            # –ü–æ–∏—Å–∫ –ø—Ä—É–∂–∏–Ω—ã –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫
            for idx, row in enumerate(data, start=2):
                if str(row.get("Numer")) == text:
                    context.user_data["selected_spring"] = {"number": row["Numer"], "row": idx}
                    shelf = row.get("Polka", "‚Äî")
                    response_text = f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø—Ä—É–∂–∏–Ω–∞:\n–ù–æ–º–µ—Ä: {row['Numer']}\n–ü–æ–ª–∫–∞: {shelf}"
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete_spring")],
                        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_spring")]
                    ])
                    await update.message.reply_text(response_text, reply_markup=keyboard)
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

    except Exception as e:
        logging.error(f"B≈ÇƒÖd przy przetwarzaniu komendy: {e}")
        await update.message.reply_text("‚ùå B≈ÇƒÖd przetwarzania. Upewnij siƒô, ≈ºe format komendy jest poprawny.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "delete_spring":
        spring = context.user_data.get("selected_spring")
        if not spring:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä—É–∂–∏–Ω—ã.")
            return
        try:
            sheet.delete_rows(spring["row"])
            await query.edit_message_text(f"‚ùå –ü—Ä—É–∂–∏–Ω–∞ {spring['number']} —É–¥–∞–ª–µ–Ω–∞.")
            context.user_data.pop("selected_spring", None)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    elif data == "edit_spring":
        spring = context.user_data.get("selected_spring")
        if not spring:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä—É–∂–∏–Ω—ã.")
            return
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–ª–∫—É –¥–ª—è –ø—Ä—É–∂–∏–Ω—ã:",
            reply_markup=shelves_keyboard()
        )

    elif data.startswith("move_shelf:"):
        new_shelf = data.split(":", 1)[1]
        spring = context.user_data.get("selected_spring")
        if not spring:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä—É–∂–∏–Ω—ã.")
            return
        try:
            sheet.update_cell(spring["row"], 2, new_shelf)
            await query.edit_message_text(f"üîÅ –ü—Ä—É–∂–∏–Ω–∞ {spring['number']} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫—É {new_shelf.upper()}.")
            context.user_data.pop("selected_spring", None)
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    elif data == "cancel":
        context.user_data.pop("selected_spring", None)
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


def main():
    bot_token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.run_polling()


if __name__ == "__main__":
    main()
