import logging
import os
import json
import gspread
import base64

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –°–∫–æ—É–ø—ã –¥–ª—è Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ JSON
encoded_creds = os.environ["GOOGLE_CREDENTIALS_B64"]
decoded_creds = base64.b64decode(encoded_creds).decode("utf-8")
service_account_info = json.loads(decoded_creds)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(service_account_info, scopes=scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1-PYvDusEahk2EYI2f4kDtu4uQ-pV756kz6fb_RXn-s8"
).sheet1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∫–∏ (—Å—Ç–æ–ª–±—Ü–∞–º–∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
SHELVES = [
    ["A1", "B1", "C1"],
    ["A2", "B2", "C2"],
    ["A3", "B3", "C3"],
    ["A4", "B4"],
    ["A5", "B5"],
    ["A6", "B6"],
    ["A7", "B7"],
    [        "B8"]
]

def shelves_keyboard():
    keyboard = []
    for row in SHELVES:
        buttons = [InlineKeyboardButton(shelf.upper(), callback_data=f"move_shelf:{shelf}") for shelf in row]
        keyboard.append(buttons)
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Cze≈õƒá! U≈ºyj komend:\n"
        "+numer, p√≥≈Çka ‚Äî dodaj sprƒô≈ºynƒô\n"
        "-numer ‚Äî usu≈Ñ sprƒô≈ºynƒô\n"
        "=numer, nowa_p√≥≈Çka ‚Äî zmie≈Ñ p√≥≈Çkƒô\n"
        "numer ‚Äî sprawd≈∫ gdzie znajduje siƒô sprƒô≈ºyna"
    )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä—É–∂–∏–Ω–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –£–¥–∞–ª–∏—Ç—å –∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
async def send_spring_info(update, context, number, shelf):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{number}"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{number}")
        ]
    ])
    text = f"üîç Znaleziono:\nNumer: {number}\nP√≥≈Çka: {shelf}"
    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        # –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ callback_query
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    data = sheet.get_all_records()

    try:
        if text.startswith("+"):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            content = text[1:].strip()
            number, shelf = [x.strip() for x in content.split(",")]
            sheet.append_row([number, shelf])
            await update.message.reply_text(f"‚úÖ Sprƒô≈ºyna {number} dodana na p√≥≈Çkƒô {shelf}.")

        elif text.startswith("-"):
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã
            number = text[1:].strip()
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.delete_rows(idx)
                    await update.message.reply_text(f"‚ùå Sprƒô≈ºyna {number} zosta≈Ça usuniƒôta.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        elif text.startswith("="):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∫–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
            content = text[1:].strip()
            number, new_shelf = [x.strip() for x in content.split(",")]
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.update_cell(idx, 2, new_shelf)
                    await update.message.reply_text(f"üîÅ P√≥≈Çka dla sprƒô≈ºyny {number} zosta≈Ça zmieniona na {new_shelf}.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        else:
            # –ü–æ–∏—Å–∫ –ø—Ä—É–∂–∏–Ω—ã –∏ –≤—ã–≤–æ–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for row in data:
                if str(row["Numer"]) == text:
                    await send_spring_info(update, context, row["Numer"], row["Polka"])
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
                    context.user_data["current_spring"] = row["Numer"]
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

    except Exception as e:
        logging.error(f"B≈ÇƒÖd przy przetwarzaniu komendy: {e}")
        await update.message.reply_text("‚ùå B≈ÇƒÖd przetwarzania. Upewnij siƒô, ≈ºe format komendy jest poprawny.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel":
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.pop("edit_number", None)
        context.user_data.pop("current_spring", None)
        return

    elif data.startswith("delete:"):
        number_to_delete = data.split(":", 1)[1]
        data_sheet = sheet.get_all_records()
        for idx, row in enumerate(data_sheet, start=2):
            if str(row["Numer"]) == number_to_delete:
                sheet.delete_rows(idx)
                await query.edit_message_text(f"‚ùå Sprƒô≈ºyna {number_to_delete} zosta≈Ça usuniƒôta.")
                context.user_data.pop("current_spring", None)
                return
        await query.edit_message_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

    elif data.startswith("edit:"):
        number_to_edit = data.split(":", 1)[1]
        context.user_data["edit_number"] = number_to_edit
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∫–∏
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–ª–∫—É –¥–ª—è –ø—Ä—É–∂–∏–Ω—ã {number_to_edit}:",
            reply_markup=shelves_keyboard()
        )

    elif data.startswith("move_shelf:"):
        new_shelf = data.split(":", 1)[1]
        number_to_edit = context.user_data.get("edit_number")
        if not number_to_edit:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –ø—Ä—É–∂–∏–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        data_sheet = sheet.get_all_records()
        for idx, row in enumerate(data_sheet, start=2):
            if str(row["Numer"]) == number_to_edit:
                sheet.update_cell(idx, 2, new_shelf)
                await query.edit_message_text(
                    f"üîÅ –ü—Ä—É–∂–∏–Ω–∞ {number_to_edit} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫—É {new_shelf}."
                )
                context.user_data.pop("edit_number", None)
                context.user_data.pop("current_spring", None)
                return
        await query.edit_message_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    bot_token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
