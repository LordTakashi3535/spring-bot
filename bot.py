import logging
import os
import json
import base64
import gspread

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from google.oauth2.service_account import Credentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–∫–æ—É–ø—ã Google API
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive",
]

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å credentials
encoded_creds = os.environ["GOOGLE_CREDENTIALS_B64"]
decoded_creds = base64.b64decode(encoded_creds).decode("utf-8")
service_account_info = json.loads(decoded_creds)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
creds = Credentials.from_service_account_info(service_account_info, scopes=scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1-PYvDusEahk2EYI2f4kDtu4uQ-pV756kz6fb_RXn-s8"
).sheet1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–û—Ç–º–µ–Ω–∞"
def cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª–æ–∫ (—Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤–Ω–∏–∑)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def shelves_keyboard():
    a = ["a1", "a2", "a3", "a4", "a5", "a6", "a7"]
    b = ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8"]
    c = ["c1", "c2", "c3"]

    max_len = max(len(a), len(b), len(c))
    keyboard = []

    for i in range(max_len):
        row = []
        if i < len(a):
            row.append(InlineKeyboardButton(a[i].upper(), callback_data=f"move_shelf:{a[i]}"))
        else:
            row.append(InlineKeyboardButton(" ", callback_data="noop"))  # –ü—É—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞

        if i < len(b):
            row.append(InlineKeyboardButton(b[i].upper(), callback_data=f"move_shelf:{b[i]}"))
        else:
            row.append(InlineKeyboardButton(" ", callback_data="noop"))

        if i < len(c):
            row.append(InlineKeyboardButton(c[i].upper(), callback_data=f"move_shelf:{c[i]}"))
        else:
            row.append(InlineKeyboardButton(" ", callback_data="noop"))

        keyboard.append(row)

    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä—É–∂–∏–Ω—É", callback_data="add_spring")],
    ])
    await update.message.reply_text(
        "Cze≈õƒá! U≈ºyj komend lub –∫–Ω–æ–ø–æ–∫:\n"
        "+numer, p√≥≈Çka ‚Äî dodaj sprƒô≈ºynƒô\n"
        "-numer ‚Äî usu≈Ñ sprƒô≈ºynƒô\n"
        "=numer, nowa_p√≥≈Çka ‚Äî zmie≈Ñ p√≥≈Çkƒô\n"
        "numer ‚Äî sprawd≈∫ gdzie znajduje siƒô sprƒô≈ºyna\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä—É–∂–∏–Ω—ã:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    data = sheet.get_all_records()

    if context.user_data.get("adding_spring"):
        if "spring_number" not in context.user_data:
            if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                context.user_data.clear()
                await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä—É–∂–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            context.user_data["spring_number"] = text
            await update.message.reply_text(
                f"–ù–æ–º–µ—Ä –ø—Ä—É–∂–∏–Ω—ã: {text}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∫—É:",
                reply_markup=shelves_keyboard()
            )
            return
        else:
            return

    try:
        if text.startswith("+"):
            content = text[1:].strip()
            number, shelf = [x.strip() for x in content.split(",")]
            sheet.append_row([number, shelf])
            await update.message.reply_text(f"‚úÖ Sprƒô≈ºyna {number} dodana na p√≥≈Çkƒô {shelf}.")

        elif text.startswith("-"):
            number = text[1:].strip()
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.delete_rows(idx)
                    await update.message.reply_text(f"‚ùå Sprƒô≈ºyna {number} zosta≈Ça usuniƒôta.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        elif text.startswith("="):
            content = text[1:].strip()
            number, new_shelf = [x.strip() for x in content.split(",")]
            for idx, row in enumerate(data, start=2):
                if str(row["Numer"]) == number:
                    sheet.update_cell(idx, 2, new_shelf)
                    await update.message.reply_text(f"üîÅ P√≥≈Çka dla sprƒô≈ºyny {number} zosta≈Ça zmieniona na {new_shelf}.")
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna nie znaleziona.")

        else:
            for row in data:
                if str(row["Numer"]) == text:
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{text}"),
                            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{text}")
                        ],
                        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                    ])
                    response = f"üîç Znaleziono:\nNumer: {row['Numer']}\nP√≥≈Çka: {row['Polka']}"
                    await update.message.reply_text(response, reply_markup=keyboard)
                    return
            await update.message.reply_text("‚ö†Ô∏è Sprƒô≈ºyna –Ω–µ znaleziona.")

    except Exception as e:
        logger.error(f"B≈ÇƒÖd przy przetwarzaniu komendy: {e}")
        await update.message.reply_text("‚ùå B≈ÇƒÖd przetwarzania. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel":
        context.user_data.clear()
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if data == "add_spring":
        context.user_data.clear()
        context.user_data["adding_spring"] = True
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä—É–∂–∏–Ω—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_keyboard())
        return

    if context.user_data.get("adding_spring") and data.startswith("move_shelf:"):
        shelf = data.split(":", 1)[1]
        context.user_data["spring_shelf"] = shelf
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_add")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await query.edit_message_text(
            f"–ù–æ–º–µ—Ä –ø—Ä—É–∂–∏–Ω—ã: {context.user_data['spring_number']}\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ–ª–∫–∞: {shelf}\n"
            "–ù–∞–∂–º–∏—Ç–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=keyboard
        )
        return

    if data == "confirm_add" and context.user_data.get("adding_spring"):
        number = context.user_data.get("spring_number")
        shelf = context.user_data.get("spring_shelf")
        if number and shelf:
            sheet.append_row([number, shelf])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            context.user_data.pop("spring_number", None)
            context.user_data.pop("spring_shelf", None)
            await query.edit_message_text(
                f"‚úÖ –ü—Ä—É–∂–∏–Ω–∞ {number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫—É {shelf}.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø—Ä—É–∂–∏–Ω—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
                reply_markup=cancel_keyboard()
            )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    if data.startswith("delete:"):
        number = data.split(":", 1)[1]
        records = sheet.get_all_records()
        for idx, row in enumerate(records, start=2):
            if str(row["Numer"]) == number:
                sheet.delete_rows(idx)
                await query.edit_message_text(f"‚ùå –ü—Ä—É–∂–∏–Ω–∞ {number} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
                return
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä—É–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if data.startswith("edit:"):
        number = data.split(":", 1)[1]
        context.user_data["editing_spring"] = number
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–ª–∫—É –¥–ª—è –ø—Ä—É–∂–∏–Ω—ã {number}:",
            reply_markup=shelves_keyboard()
        )
        return

    if context.user_data.get("editing_spring") and data.startswith("move_shelf:"):
        shelf = data.split(":", 1)[1]
        number = context.user_data.get("editing_spring")
        records = sheet.get_all_records()
        for idx, row in enumerate(records, start=2):
            if str(row["Numer"]) == number:
                sheet.update_cell(idx, 2, shelf)
                await query.edit_message_text(f"üîÅ –ü—Ä—É–∂–∏–Ω–∞ {number} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫—É {shelf}.")
                context.user_data.clear()
                return
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä—É–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        context.user_data.clear()
        return

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
    app.add_handler(CallbackQueryHandler(callback_handler))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
    app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
